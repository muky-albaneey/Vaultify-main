[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "FileExtensionValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "APITestCase",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "PrivateMessage",
        "importPath": "vaultify.accounts.models",
        "description": "vaultify.accounts.models",
        "isExtraImport": true,
        "detail": "vaultify.accounts.models",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "S3Boto3Storage",
        "importPath": "storages.backends.s3boto3",
        "description": "storages.backends.s3boto3",
        "isExtraImport": true,
        "detail": "storages.backends.s3boto3",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "service_account",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "id_token",
        "importPath": "google.oauth2",
        "description": "google.oauth2",
        "isExtraImport": true,
        "detail": "google.oauth2",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "isExtraImport": true,
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "BaseParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "JSONParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "JSONRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "BrowsableAPIRenderer",
        "importPath": "rest_framework.renderers",
        "description": "rest_framework.renderers",
        "isExtraImport": true,
        "detail": "rest_framework.renderers",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "default_storage",
        "importPath": "django.core.files.storage",
        "description": "django.core.files.storage",
        "isExtraImport": true,
        "detail": "django.core.files.storage",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "deconstructible",
        "importPath": "django.utils.deconstruct",
        "description": "django.utils.deconstruct",
        "isExtraImport": true,
        "detail": "django.utils.deconstruct",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.bin.jp",
        "description": ".venv.bin.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": ".venv.bin.jp",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserProfile',\n            fields=[",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0002_userdeletedalert",
        "description": "accounts.migrations.0002_userdeletedalert",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserDeletedAlert',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "accounts.migrations.0002_userdeletedalert",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0003_userprofile_house_address",
        "description": "accounts.migrations.0003_userprofile_house_address",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0002_userdeletedalert'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='userprofile',\n            name='house_address',\n            field=models.CharField(blank=True, max_length=255, null=True),\n        ),",
        "detail": "accounts.migrations.0003_userprofile_house_address",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0004_privatemessage",
        "description": "accounts.migrations.0004_privatemessage",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0003_userprofile_house_address'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PrivateMessage',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "accounts.migrations.0004_privatemessage",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0005_privatemessage_seen",
        "description": "accounts.migrations.0005_privatemessage_seen",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0004_privatemessage'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='privatemessage',\n            name='seen',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "accounts.migrations.0005_privatemessage_seen",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0006_alter_alert_alert_type",
        "description": "accounts.migrations.0006_alter_alert_alert_type",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0005_privatemessage_seen'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='alert',\n            name='alert_type',\n            field=models.CharField(choices=[('Visitor Arrival', 'Visitor Arrival'), ('Fire Alarm', 'Fire Alarm'), ('Security Breach', 'Security Breach'), ('others', 'others')], max_length=50),\n        ),",
        "detail": "accounts.migrations.0006_alter_alert_alert_type",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0007_userprofile_subscription_expiry_date_and_more",
        "description": "accounts.migrations.0007_userprofile_subscription_expiry_date_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0006_alter_alert_alert_type'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='userprofile',\n            name='subscription_expiry_date',\n            field=models.DateTimeField(blank=True, null=True),\n        ),",
        "detail": "accounts.migrations.0007_userprofile_subscription_expiry_date_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0008_userprofile_profile_picture",
        "description": "accounts.migrations.0008_userprofile_profile_picture",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0007_userprofile_subscription_expiry_date_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='userprofile',\n            name='profile_picture',\n            field=models.URLField(blank=True, max_length=500, null=True),\n        ),",
        "detail": "accounts.migrations.0008_userprofile_profile_picture",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0009_userprofile_password_reset_otp_and_more",
        "description": "accounts.migrations.0009_userprofile_password_reset_otp_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0008_userprofile_profile_picture'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='userprofile',\n            name='password_reset_otp',\n            field=models.CharField(blank=True, max_length=6, null=True),\n        ),",
        "detail": "accounts.migrations.0009_userprofile_password_reset_otp_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0010_userprofile_signup_otp_userprofile_signup_otp_expiry",
        "description": "accounts.migrations.0010_userprofile_signup_otp_userprofile_signup_otp_expiry",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0009_userprofile_password_reset_otp_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='userprofile',\n            name='signup_otp',\n            field=models.CharField(blank=True, max_length=6, null=True),\n        ),",
        "detail": "accounts.migrations.0010_userprofile_signup_otp_userprofile_signup_otp_expiry",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0011_userprofile_last_transaction_reference",
        "description": "accounts.migrations.0011_userprofile_last_transaction_reference",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0010_userprofile_signup_otp_userprofile_signup_otp_expiry'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='userprofile',\n            name='last_transaction_reference',\n            field=models.CharField(blank=True, max_length=255, null=True),\n        ),",
        "detail": "accounts.migrations.0011_userprofile_last_transaction_reference",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0012_transaction",
        "description": "accounts.migrations.0012_transaction",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0011_userprofile_last_transaction_reference'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "accounts.migrations.0012_transaction",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0013_devicetoken",
        "description": "accounts.migrations.0013_devicetoken",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0012_transaction'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DeviceToken',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "accounts.migrations.0013_devicetoken",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0014_userprofile_user_status",
        "description": "accounts.migrations.0014_userprofile_user_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0013_devicetoken'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='userprofile',\n            name='user_status',\n            field=models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('suspended', 'Suspended')], default='pending', max_length=20),\n        ),",
        "detail": "accounts.migrations.0014_userprofile_user_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0015_bankservicecharge",
        "description": "accounts.migrations.0015_bankservicecharge",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0014_userprofile_user_status\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"BankServiceCharge\",\n            fields=[\n                (",
        "detail": "accounts.migrations.0015_bankservicecharge",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0016_bankservicecharge_outstanding_charge_and_more",
        "description": "accounts.migrations.0016_bankservicecharge_outstanding_charge_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0015_bankservicecharge\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"bankservicecharge\",\n            name=\"outstanding_charge\",\n            field=models.DecimalField(\n                blank=True,",
        "detail": "accounts.migrations.0016_bankservicecharge_outstanding_charge_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0017_bankservicecharge_receipt_image",
        "description": "accounts.migrations.0017_bankservicecharge_receipt_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0016_bankservicecharge_outstanding_charge_and_more\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"bankservicecharge\",\n            name=\"receipt_image\",\n            field=models.ImageField(\n                blank=True,",
        "detail": "accounts.migrations.0017_bankservicecharge_receipt_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0018_remove_lostfounditem_image_and_more",
        "description": "accounts.migrations.0018_remove_lostfounditem_image_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0017_bankservicecharge_receipt_image\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"lostfounditem\",\n            name=\"image\",\n        ),\n        migrations.AlterField(",
        "detail": "accounts.migrations.0018_remove_lostfounditem_image_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0019_lostfounditem_image_delete_lostfoundfile",
        "description": "accounts.migrations.0019_lostfounditem_image_delete_lostfoundfile",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0018_remove_lostfounditem_image_and_more\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"lostfounditem\",\n            name=\"image\",\n            field=models.ImageField(\n                blank=True, null=True, upload_to=\"lostfound_images/\"",
        "detail": "accounts.migrations.0019_lostfounditem_image_delete_lostfoundfile",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0020_alter_devicetoken_unique_together_and_more",
        "description": "accounts.migrations.0020_alter_devicetoken_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"accounts\", \"0019_lostfounditem_image_delete_lostfoundfile\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterUniqueTogether(\n            name=\"devicetoken\",\n            unique_together={(\"user\", \"token\")},\n        ),",
        "detail": "accounts.migrations.0020_alter_devicetoken_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "PrivateMessageCreateTests",
        "kind": 6,
        "importPath": "accounts.tests.test_private_message_create",
        "description": "accounts.tests.test_private_message_create",
        "peekOfCode": "class PrivateMessageCreateTests(APITestCase):\n    def setUp(self):\n        self.user1 = User.objects.create_user(username='user1', password='pass123')\n        self.user2 = User.objects.create_user(username='user2', password='pass123')\n        self.url = reverse('private-message-send')  # Adjust the URL name as per your urls.py\n    def test_create_private_message_success(self):\n        self.client.force_authenticate(user=self.user1)\n        data = {\n            'receiver': self.user2.id,\n            'message': 'Hello, this is a test message.'",
        "detail": "accounts.tests.test_private_message_create",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class UserProfile(models.Model):\n    USER_STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('active', 'Active'),\n        ('suspended', 'Suspended'),  # optional, for future expansion\n    ]\n    user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True, related_name='profile')\n    phone_number = models.CharField(max_length=15, blank=True, null=True)\n    role = models.CharField(max_length=100, blank=True, null=True)\n    estate = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "BankServiceCharge",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class BankServiceCharge(models.Model):\n    PAYMENT_FREQUENCY_CHOICES = [\n        ('Daily', 'Daily'),\n        ('Weekly', 'Weekly'),\n        ('Monthly', 'Monthly'),\n        ('Quarterly', 'Quarterly'),\n        ('Yearly', 'Yearly'),\n    ]\n    # Attach to user; nullable so a user may have no service charge set\n    user = models.OneToOneField(",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "BankServiceChargeFile",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class BankServiceChargeFile(models.Model):\n    bank_service_charge = models.ForeignKey(\n        'BankServiceCharge',\n        on_delete=models.CASCADE,\n        related_name='receipt_files'\n    )\n    file = models.FileField(\n        upload_to='service_charge_receipts/',\n        help_text=\"Upload any file for the payment\"\n    )",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "AccessCode",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class AccessCode(models.Model):\n    code = models.CharField(max_length=10, unique=True)\n    visitor_name = models.CharField(max_length=255)\n    visitor_email = models.EmailField()\n    visitor_phone = models.CharField(max_length=20)\n    valid_from = models.DateTimeField()\n    valid_to = models.DateTimeField()\n    max_uses = models.PositiveIntegerField(default=1)\n    current_uses = models.PositiveIntegerField(default=0)\n    gate = models.CharField(max_length=50)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Alert",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Alert(models.Model):\n    ALERT_TYPES = [\n        ('Visitor Arrival', 'Visitor Arrival'),\n        ('Fire Alarm', 'Fire Alarm'),\n        ('Security Breach', 'Security Breach'),\n        ('others', 'others'),\n    ]\n    URGENCY_LEVELS = [\n        ('Low', 'Low'),\n        ('Medium', 'Medium'),",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "UserDeletedAlert",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class UserDeletedAlert(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='deleted_alerts')\n    alert = models.ForeignKey(Alert, on_delete=models.CASCADE, related_name='deleted_by_users')\n    deleted_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        unique_together = ('user', 'alert')\n    def __str__(self):\n        return f\"Deleted Alert {self.alert.id} by User {self.user.username}\"\nfrom django.db import models\nfrom django.contrib.auth.models import User",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "LostFoundItem",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class LostFoundItem(models.Model):\n    ITEM_TYPES = [\n        ('Lost', 'Lost'),\n        ('Found', 'Found'),\n    ]\n    description = models.TextField()\n    item_type = models.CharField(max_length=10, choices=ITEM_TYPES)\n    location = models.CharField(max_length=255, blank=True, null=True)\n    date_reported = models.DateTimeField(auto_now_add=True)\n    contact_info = models.CharField(max_length=255, blank=True, null=True)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "PrivateMessage",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class PrivateMessage(models.Model):\n    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_messages')\n    receiver = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_messages')\n    message = models.TextField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n    seen = models.BooleanField(default=False)\n    class Meta:\n        ordering = ['timestamp']\n    def __str__(self):\n        return f\"Message from {self.sender.username} to {self.receiver.username} at {self.timestamp}\"",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Transaction",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='transactions')\n    date = models.DateTimeField(auto_now_add=True)\n    reference = models.CharField(max_length=255)\n    status = models.CharField(max_length=50)\n    amount = models.DecimalField(max_digits=12, decimal_places=2)\n    def __str__(self):\n        return f\"Transaction {self.reference} for {self.user.username} - {self.status} - {self.amount}\"\nfrom django.db import models\nfrom django.contrib.auth.models import User",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "DeviceToken",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class DeviceToken(models.Model):\n    user      = models.ForeignKey(User, on_delete=models.CASCADE, related_name='device_tokens')\n    token     = models.CharField(max_length=255)                 # no unique=True\n    platform  = models.CharField(max_length=16, blank=True)      # \"android\" | \"ios\" | \"web\"\n    device_id = models.CharField(max_length=128, blank=True)\n    last_seen = models.DateTimeField(auto_now=True)\n    class Meta:\n        unique_together = (\"user\", \"token\")\n        indexes = [models.Index(fields=[\"token\"])]\n    def __str__(self):",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "create_user_related_objects",
        "kind": 2,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "def create_user_related_objects(sender, instance, created, **kwargs):\n    \"\"\"\n    When a new User is created, create a blank UserProfile and a blank BankServiceCharge\n    so both objects always exist and can be updated later.\n    \"\"\"\n    if created:\n        # create profile if it doesn't exist\n        # UserProfile.objects.create(user=instance)\n        # create an empty bank service charge record attached to the user\n        BankServiceCharge.objects.create(user=instance)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "save_user_profile",
        "kind": 2,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "def save_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n    # No need to call save() unless there are updates to the profile\nclass Alert(models.Model):\n    ALERT_TYPES = [\n        ('Visitor Arrival', 'Visitor Arrival'),\n        ('Fire Alarm', 'Fire Alarm'),\n        ('Security Breach', 'Security Breach'),\n        ('others', 'others'),",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "BankServiceChargeFileSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class BankServiceChargeFileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BankServiceChargeFile\n        fields = ['id', 'file', 'uploaded_at']\n# ---------------- BankServiceCharge Serializer ----------------\nfrom decimal import Decimal\nfrom rest_framework import serializers\nclass BankServiceChargeSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField(source='user.id', read_only=True)\n    receipt_files = BankServiceChargeFileSerializer(many=True, read_only=True)",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "BankServiceChargeSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class BankServiceChargeSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField(source='user.id', read_only=True)\n    receipt_files = BankServiceChargeFileSerializer(many=True, read_only=True)\n    class Meta:\n        model = BankServiceCharge\n        fields = [\n            'id', 'user_id', 'service_charge', 'paid_charge', 'outstanding_charge',\n            'payment_frequency', 'bank_name', 'account_name', 'account_number',\n            'receipt_files', 'created_at', 'updated_at'\n        ]",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "BankServiceChargeSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class BankServiceChargeSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField(source='user.id', read_only=True)\n    receipt_files = BankServiceChargeFileSerializer(many=True, read_only=True)\n    class Meta:\n        model = BankServiceCharge\n        fields = [\n            'id', 'user_id', 'service_charge', 'paid_charge', 'outstanding_charge',\n            'payment_frequency', 'bank_name', 'account_name', 'account_number',\n            'receipt_files', 'created_at', 'updated_at'\n        ]",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "TransactionSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class TransactionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Transaction\n        fields = ['id', 'user', 'date', 'reference', 'status', 'amount']\n        read_only_fields = ['id', 'user', 'date']\nclass SubscriptionUserSerializer(serializers.Serializer):\n    user_id = serializers.IntegerField()\n    email = serializers.EmailField()\n    first_name = serializers.CharField()\n    last_name = serializers.CharField()",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "SubscriptionUserSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class SubscriptionUserSerializer(serializers.Serializer):\n    user_id = serializers.IntegerField()\n    email = serializers.EmailField()\n    first_name = serializers.CharField()\n    last_name = serializers.CharField()\n    payment_amount = serializers.DecimalField(max_digits=12, decimal_places=2)\n    subscription_type = serializers.CharField()\n    payment_date = serializers.DateTimeField(allow_null=True)\nclass AccessCodeSerializer(serializers.ModelSerializer):\n    creator_name = serializers.CharField(source='creator.get_full_name', read_only=True)",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "AccessCodeSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class AccessCodeSerializer(serializers.ModelSerializer):\n    creator_name = serializers.CharField(source='creator.get_full_name', read_only=True)\n    class Meta:\n        model = AccessCode\n        fields = [\n            'code', 'visitor_name', 'visitor_email', 'visitor_phone',\n            'valid_from', 'valid_to', 'max_uses', 'current_uses',\n            'gate', 'creator', 'creator_name', 'is_active', 'notify_on_use',\n            'created_at'\n        ]",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UserProfileSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UserProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserProfile\n        fields = ['phone_number', 'role', 'estate', 'estate_email', 'house_address', 'pin', 'plan', 'wallet_balance', 'profile_picture', 'subscription_start_date', 'subscription_expiry_date','user_status']\n    def validate_role(self, value):\n        \"\"\"\n        Validate that the role is either 'Residence' or 'Security Personnel'.\n        \"\"\"\n        valid_roles = ['Residence', 'Security Personnel']\n        if value not in valid_roles:",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    profile = UserProfileSerializer()\n    password = serializers.CharField(write_only=True)\n    bank_service_charge = serializers.SerializerMethodField()\n    transactions = serializers.SerializerMethodField()\n    subscription = serializers.SerializerMethodField()  # <-- Add this\n    class Meta:\n        model = User\n        fields = [\n            'id', 'email', 'first_name', 'last_name',",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "AlertSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class AlertSerializer(serializers.ModelSerializer):\n    sender_role = serializers.SerializerMethodField()\n    class Meta:\n        model = Alert\n        fields = ['id', 'message', 'alert_type', 'recipients', 'urgency_level', 'timestamp', 'sender', 'sender_role']\n        read_only_fields = ['timestamp', 'sender', 'sender_role']\n    def get_sender_role(self, obj):\n        try:\n            return obj.sender.profile.role\n        except Exception:",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "LostFoundItemSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class LostFoundItemSerializer(serializers.ModelSerializer):\n    # Use the UserSerializer already defined earlier in this file\n    sender = UserSerializer(read_only=True)\n    class Meta:\n        model = LostFoundItem\n        fields = [\n            'id',\n            'description',\n            'item_type',\n            'location',",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "PrivateMessageSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class PrivateMessageSerializer(serializers.ModelSerializer):\n    sender = serializers.StringRelatedField(read_only=True)\n    receiver = serializers.PrimaryKeyRelatedField(queryset=User.objects.all())\n    class Meta:\n        model = PrivateMessage\n        fields = ['id', 'sender', 'receiver', 'message', 'timestamp']\n        read_only_fields = ['id', 'sender', 'timestamp']\nfrom rest_framework import serializers\nfrom .models import UserProfile\nfrom rest_framework import serializers",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UserStatusUpdateSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UserStatusUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserProfile\n        fields = ['user_status']",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# ---------------- BankServiceChargeFile Serializer ----------------\nclass BankServiceChargeFileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = BankServiceChargeFile\n        fields = ['id', 'file', 'uploaded_at']\n# ---------------- BankServiceCharge Serializer ----------------\nfrom decimal import Decimal\nfrom rest_framework import serializers\nclass BankServiceChargeSerializer(serializers.ModelSerializer):",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "logger = logging.getLogger(__name__)\nfrom rest_framework import serializers\nfrom .models import LostFoundItem\nfrom .models import LostFoundItem\nfrom .serializers import UserSerializer\nclass LostFoundItemSerializer(serializers.ModelSerializer):\n    # Use the UserSerializer already defined earlier in this file\n    sender = UserSerializer(read_only=True)\n    class Meta:\n        model = LostFoundItem",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "MediaRootS3Boto3Storage",
        "kind": 6,
        "importPath": "accounts.storages",
        "description": "accounts.storages",
        "peekOfCode": "class MediaRootS3Boto3Storage(S3Boto3Storage):\n    location = \"media\"            # prefix inside the bucket\n    default_acl = None            # use bucket policy",
        "detail": "accounts.storages",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    # Authentication\n    path('signup/send-otp/', SignupSendOTPView.as_view(), name='signup-send-otp'),\n    path('signup/verify-otp/', SignupVerifyOTPView.as_view(), name='signup-verify-otp'),\n    path('signup/', SignupView.as_view(), name='signup'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('login/<int:pk>/', LoginWithIdView.as_view(), name='login-with-id'),\n    path('user/<int:pk>/', UserUpdateView.as_view(), name='user-update'),\n    path('verify-email/<str:token>/', VerifyEmailView.as_view(), name='verify-email'),\n    path('resend-verification/', ResendVerificationEmailView.as_view(), name='resend-verification'),",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "send_fcm_v1_to_token",
        "kind": 2,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "def send_fcm_v1_to_token(token: str, title: str, body: str, data: dict | None = None):\n    payload = {\n        \"message\": {\n            \"token\": token,\n            \"notification\": {\"title\": title, \"body\": body},\n            \"data\": {k: str(v) for k, v in (data or {}).items()},\n            \"android\": {\"priority\": \"HIGH\"},\n            \"apns\": {\"headers\": {\"apns-priority\": \"10\"}},\n        }\n    }",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "send_fcm_v1_to_topic",
        "kind": 2,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "def send_fcm_v1_to_topic(topic: str, title: str, body: str, data: dict | None = None):\n    payload = {\n        \"message\": {\n            \"topic\": topic,\n            \"notification\": {\"title\": title, \"body\": body},\n            \"data\": {k: str(v) for k, v in (data or {}).items()},\n        }\n    }\n    ok, code, j = _post_fcm(payload)\n    return {\"ok\": ok, \"status\": code, \"detail\": j}",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "FIREBASE_PROJECT_ID",
        "kind": 5,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "FIREBASE_PROJECT_ID = os.getenv(\"FIREBASE_PROJECT_ID\")  # e.g. \"my-firebase-project\"\nGOOGLE_APPLICATION_CREDENTIALS_JSON = os.getenv(\"GOOGLE_APPLICATION_CREDENTIALS_JSON\")\nSCOPES = [\"https://www.googleapis.com/auth/firebase.messaging\"]\ndef _require_env():\n    if not FIREBASE_PROJECT_ID:\n        raise RuntimeError(\"FIREBASE_PROJECT_ID env var is not set\")\n    if not (GOOGLE_APPLICATION_CREDENTIALS_JSON or os.getenv(\"GOOGLE_APPLICATION_CREDENTIALS\")):\n        raise RuntimeError(\"Set GOOGLE_APPLICATION_CREDENTIALS_JSON or GOOGLE_APPLICATION_CREDENTIALS\")\ndef _get_access_token():\n    _require_env()",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "GOOGLE_APPLICATION_CREDENTIALS_JSON",
        "kind": 5,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "GOOGLE_APPLICATION_CREDENTIALS_JSON = os.getenv(\"GOOGLE_APPLICATION_CREDENTIALS_JSON\")\nSCOPES = [\"https://www.googleapis.com/auth/firebase.messaging\"]\ndef _require_env():\n    if not FIREBASE_PROJECT_ID:\n        raise RuntimeError(\"FIREBASE_PROJECT_ID env var is not set\")\n    if not (GOOGLE_APPLICATION_CREDENTIALS_JSON or os.getenv(\"GOOGLE_APPLICATION_CREDENTIALS\")):\n        raise RuntimeError(\"Set GOOGLE_APPLICATION_CREDENTIALS_JSON or GOOGLE_APPLICATION_CREDENTIALS\")\ndef _get_access_token():\n    _require_env()\n    if GOOGLE_APPLICATION_CREDENTIALS_JSON:",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "SCOPES",
        "kind": 5,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "SCOPES = [\"https://www.googleapis.com/auth/firebase.messaging\"]\ndef _require_env():\n    if not FIREBASE_PROJECT_ID:\n        raise RuntimeError(\"FIREBASE_PROJECT_ID env var is not set\")\n    if not (GOOGLE_APPLICATION_CREDENTIALS_JSON or os.getenv(\"GOOGLE_APPLICATION_CREDENTIALS\")):\n        raise RuntimeError(\"Set GOOGLE_APPLICATION_CREDENTIALS_JSON or GOOGLE_APPLICATION_CREDENTIALS\")\ndef _get_access_token():\n    _require_env()\n    if GOOGLE_APPLICATION_CREDENTIALS_JSON:\n        info = json.loads(GOOGLE_APPLICATION_CREDENTIALS_JSON)",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "SubscriptionUsersListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class SubscriptionUsersListView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        estate = request.query_params.get('estate')\n        if estate:\n            users = User.objects.filter(profile__is_email_verified=True, profile__estate=estate).distinct()\n        else:\n            users = User.objects.filter(profile__is_email_verified=True).distinct()\n        subscription_users = []\n        for user in users:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UploadProfileImageView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UploadProfileImageView(APIView):\n    permission_classes = [IsAuthenticated]\n    parser_classes = [MultiPartParser, FormParser]\n    def post(self, request, format=None):\n        logger = logging.getLogger(__name__)\n        logger.info(\"UploadProfileImageView POST called\")\n        logger.info(f\"Request user: {request.user}\")\n        logger.info(f\"Request files: {request.FILES}\")\n        file_obj = request.FILES.get('image')\n        if not file_obj:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UserTransactionListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UserTransactionListView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request, user_id):\n        try:\n            user = User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\n        transactions = Transaction.objects.filter(user=user).order_by('-date')\n        serializer = TransactionSerializer(transactions, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "SignupView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class SignupView(APIView):\n    \"\"\"\n    Signup + email‑OTP verification.\n    \"\"\"\n    def post(self, request):\n        email      = request.data.get('email', '').strip().lower()\n        otp        = request.data.get('otp', '').strip()\n        first_name = request.data.get('first_name', '').strip()\n        last_name  = request.data.get('last_name', '').strip()\n        password   = request.data.get('password', '').strip()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PlainTextParser",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class PlainTextParser(BaseParser):\n    \"\"\"\n    Plain text parser for 'text/plain' content type.\n    \"\"\"\n    media_type = 'text/plain'\n    def parse(self, stream, media_type=None, parser_context=None):\n        return stream.read().decode('utf-8')\nclass PlainTextOrFormParser(FormParser):\n    \"\"\"\n    Parser to accept both 'text/plain' and 'application/x-www-form-urlencoded' content types.",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PlainTextOrFormParser",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class PlainTextOrFormParser(FormParser):\n    \"\"\"\n    Parser to accept both 'text/plain' and 'application/x-www-form-urlencoded' content types.\n    \"\"\"\n    media_type = 'text/plain'\n    def parse(self, stream, media_type=None, parser_context=None):\n        if media_type == 'application/x-www-form-urlencoded':\n            return super().parse(stream, media_type, parser_context)\n        return stream.read().decode('utf-8')\nPAYSTACK_SECRET_KEY = 'sk_live_43fc893ff9d7a6dd07302e43aae78602c0dc62c8'  # Replace with your Paystack secret key",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "SignupSendOTPView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class SignupSendOTPView(APIView):\n    def post(self, request):\n        email = request.data.get('email', '').strip().lower()\n        if not email:\n            return Response({'error': 'Email is required'}, status=status.HTTP_400_BAD_REQUEST)\n        # Check if user exists\n        from django.contrib.auth.models import User\n        try:\n            user = User.objects.get(email=email)\n        except User.DoesNotExist:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "SignupVerifyOTPView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class SignupVerifyOTPView(APIView):\n    def post(self, request):\n        email = request.data.get('email', '').strip().lower()\n        otp = request.data.get('otp', '').strip()\n        if not email or not otp:\n            return Response({'error': 'Email and OTP are required'}, status=status.HTTP_400_BAD_REQUEST)\n        from django.contrib.auth.models import User\n        try:\n            user = User.objects.get(email=email)\n        except User.DoesNotExist:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "CheckEmailVerificationView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class CheckEmailVerificationView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        user = request.user\n        if user.profile.is_email_verified:\n            return Response({'is_email_verified': True}, status=status.HTTP_200_OK)\n        else:\n            return Response({'is_email_verified': False}, status=status.HTTP_200_OK)\nclass LoginView(APIView):\n    def post(self, request):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LoginView(APIView):\n    def post(self, request):\n        email = request.data.get('email').lower()  # Normalize to lowercase\n        password = request.data.get('password')\n        print(email)\n        user = authenticate(username=email, password=password)\n        print(user)\n        if user:\n            if not user.profile.is_email_verified:\n                logger.warning(f\"Login failed: Email not verified for {email}\")",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UserUpdateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UserUpdateView(APIView):\n    authentication_classes = []          # bypass any global authenticators (e.g. JWT/Session)\n    permission_classes = [AllowAny]      # anyone can call it\n    def get(self, request, pk):\n        try:\n            user = User.objects.get(pk=pk)\n        except User.DoesNotExist:\n            return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\n        serializer = UserSerializer(user)\n        return Response(serializer.data, status=status.HTTP_200_OK)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AccessCodeCreateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AccessCodeCreateView(generics.CreateAPIView):\n    serializer_class = AccessCodeSerializer\n    permission_classes = [IsAuthenticated]\n    def perform_create(self, serializer):\n        try:\n            serializer.save(creator=self.request.user)\n        except IntegrityError as e:\n            # The perform_create method should not return Response objects.\n            # Instead, raise the exception to be handled by the framework.\n            raise e",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PaystackWebhookView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class PaystackWebhookView(APIView):\n    def post(self, request, *args, **kwargs):\n        paystack_secret = 'sk_live_43fc893ff9d7a6dd07302e43aae78602c0dc62c8'  # Use your secret key\n        signature = request.headers.get('x-paystack-signature')\n        payload = request.body\n        if not signature:\n            return JsonResponse({'error': 'Signature missing'}, status=400)\n        computed_signature = hmac.new(\n            paystack_secret.encode('utf-8'),\n            msg=payload,",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "VerifyEmailView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class VerifyEmailView(APIView):\n    def get(self, request, token):\n        redirect_url = getattr(settings, 'EMAIL_VERIFICATION_REDIRECT_URL', None)\n        try:\n            profile = UserProfile.objects.get(email_verification_token=token)\n            profile.is_email_verified = True\n            profile.email_verification_token = ''\n            profile.save()\n            logger.info(f\"Email verified for user {profile.user.email}\")\n            if redirect_url:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ResendVerificationEmailView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ResendVerificationEmailView(APIView):\n    def post(self, request):\n        email = request.data.get('email')\n        try:\n            user = User.objects.get(email=email)\n            if user.profile.is_email_verified:\n                return Response({'error': 'Email already verified'}, status=status.HTTP_400_BAD_REQUEST)\n            verification_token = str(uuid.uuid4())\n            user.profile.email_verification_token = verification_token\n            user.profile.save()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "GoogleSignInView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class GoogleSignInView(APIView):\n    def post(self, request):\n        token = request.data.get('id_token')\n        try:\n            idinfo = id_token.verify_oauth2_token(token, requests.Request(), settings.GOOGLE_CLIENT_ID)\n            email = idinfo['email']\n            name = idinfo.get('name', '')\n            first_name = name.split(' ')[0] if name else ''\n            last_name = ' '.join(name.split(' ')[1:]) if len(name.split(' ')) > 1 else ''\n            user, created = User.objects.get_or_create(",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetRequestView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class PasswordResetRequestView(APIView):\n    def post(self, request):\n        email = request.data.get('email')\n        try:\n            users = User.objects.filter(email=email)\n            if not users.exists():\n                return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\n            for user in users:\n                profile = user.profile\n                # Generate 6-digit OTP",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetVerifyOTPView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class PasswordResetVerifyOTPView(APIView):\n    def post(self, request):\n        email = request.data.get('email')\n        otp = request.data.get('otp')\n        new_password = request.data.get('new_password')\n        if not all([email, otp, new_password]):\n            return Response({'error': 'Email, OTP, and new password are required'}, status=status.HTTP_400_BAD_REQUEST)\n        try:\n            users = User.objects.filter(email=email)\n            if not users.exists():",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "DeleteAccountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class DeleteAccountView(APIView):\n    authentication_classes = []                 # no JWT/Session auth\n    permission_classes = [AllowAny]             # allow anonymous\n    parser_classes = [MultiPartParser, FormParser]  # handle file uploads\n    def delete(self, request, pk):\n        # if request.user.pk != pk:\n        #     return Response({'error': 'You can only delete your own account'}, status=status.HTTP_403_FORBIDDEN)\n        try:\n            user = User.objects.get(pk=pk)\n            user.delete()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "OpenDeleteAccountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class OpenDeleteAccountView(APIView):\n    authentication_classes = []     # ignore global authenticators\n    permission_classes = [AllowAny] # allow anonymous\n    # extra hard override in case a project-level mixin tries to inject perms\n    def get_authenticators(self):    # return none → no auth attempted\n        return []\n    def get_permissions(self):       # force AllowAny at runtime\n        return [AllowAny()]\n    def delete(self, request, pk):\n        user = get_object_or_404(User, pk=pk)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LogoutView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        try:\n            if request.auth:\n                token = AuthToken.objects.get(key=request.auth)\n                token.delete()\n                logger.info(f\"User {request.user.email} logged out successfully\")\n                return Response({'message': 'Logged out successfully'}, status=status.HTTP_200_OK)\n            return Response({'error': 'No active session found'}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LoginWithIdView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LoginWithIdView(APIView):\n    def get(self, request, pk):\n        try:\n            user = User.objects.get(pk=pk)\n            if not user.profile.is_email_verified:\n                return Response({'error': 'Email not verified'}, status=status.HTTP_403_FORBIDDEN)\n            token, _ = AuthToken.objects.get_or_create(user=user)\n            logger.info(f\"Login with ID successful for {user.email}, Role: {user.profile.role}\")\n            return Response({'token': token.key, 'user': UserSerializer(user).data}, status=status.HTTP_200_OK)\n        except User.DoesNotExist:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AccessCodeCreateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AccessCodeCreateView(generics.CreateAPIView):\n    serializer_class = AccessCodeSerializer\n    permission_classes = [IsAuthenticated]\n    def perform_create(self, serializer):\n        try:\n            instance = serializer.save(creator=self.request.user)\n            logger.info(f\"Access code created: {instance.code} by user {self.request.user.email}\")\n        except Exception as e:\n            logger.error(f\"Error creating access code: {e}\")\n            raise e",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AlertCountByEstateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AlertCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        estate = request.query_params.get('estate')\n        if not estate:\n            return Response({'error': 'Estate parameter is required'}, status=status.HTTP_400_BAD_REQUEST)\n        alerts_count = Alert.objects.filter(sender__profile__estate=estate).count()\n        return Response({'estate': estate, 'alerts_count': alerts_count}, status=status.HTTP_200_OK)\nclass LostFoundCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LostFoundCountByEstateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LostFoundCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        estate = request.query_params.get('estate')\n        if not estate:\n            return Response({'error': 'Estate parameter is required'}, status=status.HTTP_400_BAD_REQUEST)\n        lostfound_count = LostFoundItem.objects.filter(sender__profile__estate=estate).count()\n        return Response({'estate': estate, 'lostfound_count': lostfound_count}, status=status.HTTP_200_OK)\nclass AccessCodeVerifiedCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AccessCodeVerifiedCountByEstateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AccessCodeVerifiedCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        estate = request.query_params.get('estate')\n        if not estate:\n            return Response({'error': 'Estate parameter is required'}, status=status.HTTP_400_BAD_REQUEST)\n        verified_count = AccessCode.objects.filter(creator__profile__estate=estate, current_uses__gt=0).count()\n        return Response({'estate': estate, 'verified_count': verified_count}, status=status.HTTP_200_OK)\nclass AccessCodeUnapprovedCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AccessCodeUnapprovedCountByEstateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AccessCodeUnapprovedCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        estate = request.query_params.get('estate')\n        if not estate:\n            return Response({'error': 'Estate parameter is required'}, status=status.HTTP_400_BAD_REQUEST)\n        unapproved_count = AccessCode.objects.filter(creator__profile__estate=estate, current_uses=0).count()\n        return Response({'estate': estate, 'unapproved_count': unapproved_count}, status=status.HTTP_200_OK)\nclass ResidenceUsersCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ResidenceUsersCountByEstateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ResidenceUsersCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        estate = request.query_params.get('estate')\n        if not estate:\n            return Response({'error': 'Estate parameter is required'}, status=status.HTTP_400_BAD_REQUEST)\n        count = User.objects.filter(profile__role='Residence', profile__is_email_verified=True, profile__estate=estate).count()\n        return Response({'estate': estate, 'count': count}, status=status.HTTP_200_OK)\nclass SecurityPersonnelUsersCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "SecurityPersonnelUsersCountByEstateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class SecurityPersonnelUsersCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        estate = request.query_params.get('estate')\n        if not estate:\n            return Response({'error': 'Estate parameter is required'}, status=status.HTTP_400_BAD_REQUEST)\n        count = User.objects.filter(profile__role='Security Personnel', profile__is_email_verified=True, profile__estate=estate).count()\n        return Response({'estate': estate, 'count': count}, status=status.HTTP_200_OK)\nclass LostFoundAndAlertCountView(APIView):\n    permission_classes = [IsAuthenticated]",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LostFoundAndAlertCountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LostFoundAndAlertCountView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        # Deprecated combined counts endpoint\n        return Response({'detail': 'Use separate endpoints for alerts and lostfound counts'}, status=status.HTTP_400_BAD_REQUEST)\nclass AlertCountView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        user = request.user\n        deleted_alert_ids = user.deleted_alerts.values_list('alert_id', flat=True)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AlertCountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AlertCountView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        user = request.user\n        deleted_alert_ids = user.deleted_alerts.values_list('alert_id', flat=True)\n        user_role = None\n        try:\n            user_role = user.profile.role\n        except Exception as e:\n            # Log error if user profile or role is missing",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LostFoundCountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LostFoundCountView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        lostfound_count = LostFoundItem.objects.count()\n        logger.debug(f\"Total lost and found items count: {lostfound_count}\")\n        return Response({'lostfound_count': lostfound_count}, status=status.HTTP_200_OK)\nclass AlertDeleteView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request, alert_id):\n        user = request.user",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AlertDeleteView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AlertDeleteView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request, alert_id):\n        user = request.user\n        try:\n            alert = Alert.objects.get(id=alert_id)\n        except Alert.DoesNotExist:\n            return Response({'error': 'Alert not found'}, status=status.HTTP_404_NOT_FOUND)\n        # Check if already deleted\n        deleted, created = UserDeletedAlert.objects.get_or_create(user=user, alert=alert)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AlertListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AlertListView(generics.ListAPIView):\n    serializer_class = AlertSerializer\n    permission_classes = [IsAuthenticated]\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['alert_type', 'urgency_level', 'recipients']\n    def get_queryset(self):\n        user = self.request.user\n        try:\n            user_role = user.profile.role\n        except Exception:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AccessCodeVerifyView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AccessCodeVerifyView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        code = request.data.get('code')\n        user = request.user\n        auth_header = request.headers.get('Authorization', 'No Authorization header')\n        logger.debug(f\"AccessCodeVerifyView called by user: {user.email}, Authorization: {auth_header}, code: {code}\")\n        if not code:\n            logger.error(\"No code provided in verification request\")\n            return Response({\"error\": \"Access code is required\"}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AccessCodeVerifiedCountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AccessCodeVerifiedCountView(APIView):\n    def get(self, request):\n        verified_count = AccessCode.objects.filter(current_uses__gt=0).count()\n        return Response({\"verified_count\": verified_count}, status=status.HTTP_200_OK)\nclass AccessCodeUnapprovedCountView(APIView):\n    def get(self, request):\n        unapproved_count = AccessCode.objects.filter(current_uses=0).count()\n        return Response({\"unapproved_count\": unapproved_count}, status=status.HTTP_200_OK)\nclass AlertCreateView(generics.CreateAPIView):\n    queryset = Alert.objects.all()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AccessCodeUnapprovedCountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AccessCodeUnapprovedCountView(APIView):\n    def get(self, request):\n        unapproved_count = AccessCode.objects.filter(current_uses=0).count()\n        return Response({\"unapproved_count\": unapproved_count}, status=status.HTTP_200_OK)\nclass AlertCreateView(generics.CreateAPIView):\n    queryset = Alert.objects.all()\n    serializer_class = AlertSerializer\n    permission_classes = [IsAuthenticated]\n    def perform_create(self, serializer):\n        user_estate = getattr(self.request.user.profile, 'estate', None)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AlertCreateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AlertCreateView(generics.CreateAPIView):\n    queryset = Alert.objects.all()\n    serializer_class = AlertSerializer\n    permission_classes = [IsAuthenticated]\n    def perform_create(self, serializer):\n        user_estate = getattr(self.request.user.profile, 'estate', None)\n        serializer.save(sender=self.request.user, estate=user_estate)\nclass AlertListView(generics.ListAPIView):\n    serializer_class = AlertSerializer\n    permission_classes = [IsAuthenticated]",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AlertListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AlertListView(generics.ListAPIView):\n    serializer_class = AlertSerializer\n    permission_classes = [IsAuthenticated]\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['alert_type', 'urgency_level', 'recipients']\n    def get_queryset(self):\n        from django.db.models import Q\n        user = self.request.user\n        user_id_str = str(user.id)\n        estate = self.request.query_params.get('estate')",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "GeneralAlertListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class GeneralAlertListView(generics.ListAPIView):\n    serializer_class = AlertSerializer\n    permission_classes = [IsAuthenticated]\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['alert_type', 'urgency_level', 'recipients']\n    def get_queryset(self):\n        user = self.request.user\n        deleted_alert_ids = user.deleted_alerts.values_list('alert_id', flat=True)\n        return Alert.objects.exclude(\n            id__in=deleted_alert_ids",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LostFoundItemCreateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LostFoundItemCreateView(generics.CreateAPIView):\n    queryset = LostFoundItem.objects.all()\n    serializer_class = LostFoundItemSerializer\n    permission_classes = [IsAuthenticated]\n    parser_classes = [MultiPartParser, FormParser]\n    def perform_create(self, serializer):\n        # Estate is derived at list-time from sender.profile; no need to store on model\n        serializer.save(sender=self.request.user)\nclass LostFoundItemListView(generics.ListAPIView):\n    serializer_class = LostFoundItemSerializer",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LostFoundItemListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LostFoundItemListView(generics.ListAPIView):\n    serializer_class = LostFoundItemSerializer\n    permission_classes = [IsAuthenticated]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['description', 'location', 'contact_info']  # leave text to SearchFilter\n    ordering = ['-date_reported']\n    def get_queryset(self):\n        # Prefer explicit ?estate=..., else use the caller’s estate\n        estate = self.request.query_params.get('estate') or getattr(self.request.user.profile, 'estate', None)\n        if not estate:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LostFoundItemListAllView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LostFoundItemListAllView(generics.ListAPIView):\n    queryset = LostFoundItem.objects.select_related('sender', 'sender__profile').order_by('-date_reported')\n    serializer_class = LostFoundItemSerializer\n    permission_classes = [IsAuthenticated]\nfrom rest_framework import generics\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated\nfrom django.contrib.auth.models import User\nfrom .serializers import UserSerializer",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "LostFoundItemDetailView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class LostFoundItemDetailView(generics.RetrieveUpdateDestroyAPIView):\n    queryset = LostFoundItem.objects.all()\n    serializer_class = LostFoundItemSerializer\n    permission_classes = [IsAuthenticated]\nclass VisitorCheckinListView(generics.ListAPIView):\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        estate = self.request.query_params.get('estate')\n        if not estate:\n            return AccessCode.objects.none()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "VisitorCheckinListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class VisitorCheckinListView(generics.ListAPIView):\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        estate = self.request.query_params.get('estate')\n        if not estate:\n            return AccessCode.objects.none()\n        return AccessCode.objects.filter(current_uses__gt=0, creator__profile__estate=estate).order_by('-created_at')\n    def list(self, request, *args, **kwargs):\n        estate = request.query_params.get('estate')\n        if not estate:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "GeneralVisitorCheckinListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class GeneralVisitorCheckinListView(generics.ListAPIView):\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        return AccessCode.objects.filter(current_uses__gt=0).order_by('-created_at')\n    def list(self, request, *args, **kwargs):\n        queryset = self.get_queryset()\n        serializer = AccessCodeSerializer(queryset, many=True)\n        response_data = {\n            'count': queryset.count(),\n            'visitors': [",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ResidenceUsersListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ResidenceUsersListView(generics.ListAPIView):\n    permission_classes = [IsAuthenticated]\n    serializer_class = UserSerializer\n    def get_queryset(self):\n        estate = self.request.query_params.get('estate')\n        if not estate:\n            user = self.request.user\n            estate = getattr(user.profile, 'estate', None)\n        if not estate:\n            return User.objects.none()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ResidenceUsersListAllView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ResidenceUsersListAllView(generics.ListAPIView):\n    permission_classes = [IsAuthenticated]\n    serializer_class = UserSerializer\n    def get_queryset(self):\n        return User.objects.filter(profile__role='Residence', profile__is_email_verified=True)\nfrom rest_framework import generics\nfrom rest_framework.permissions import IsAuthenticated\nfrom .models import PrivateMessage\nfrom .serializers import PrivateMessageSerializer\nfrom rest_framework.response import Response",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PrivateMessageListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class PrivateMessageListView(generics.ListCreateAPIView):\n    serializer_class = PrivateMessageSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        user = self.request.user\n        other_user_id = self.request.query_params.get('user_id')\n        if not other_user_id:\n            return PrivateMessage.objects.none()\n        # Get estates of both users\n        try:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PrivateMessageCreateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class PrivateMessageCreateView(generics.CreateAPIView):\n    serializer_class = PrivateMessageSerializer\n    permission_classes = [IsAuthenticated]\n    def perform_create(self, serializer):\n        receiver = serializer.validated_data.get('receiver')\n        if receiver is None:\n            raise serializers.ValidationError({\"receiver\": \"This field is required.\"})\n        # Check estate match\n        try:\n            sender_estate = self.request.user.profile.estate",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "SecurityPersonnelUsersListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class SecurityPersonnelUsersListView(generics.ListAPIView):\n    permission_classes = [IsAuthenticated]\n    serializer_class = UserSerializer\n    def get_queryset(self):\n        estate = self.request.query_params.get('estate')\n        if not estate:\n            user = self.request.user\n            estate = getattr(user.profile, 'estate', None)\n        if not estate:\n            return User.objects.none()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "SecurityPersonnelUsersListAllView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class SecurityPersonnelUsersListAllView(generics.ListAPIView):\n    permission_classes = [IsAuthenticated]\n    serializer_class = UserSerializer\n    def get_queryset(self):\n        return User.objects.filter(profile__role='Security Personnel', profile__is_email_verified=True)\nclass ResidenceUsersCountView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        count = User.objects.filter(profile__role='Residence', profile__is_email_verified=True).count()\n        return Response({'count': count})",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ResidenceUsersCountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ResidenceUsersCountView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        count = User.objects.filter(profile__role='Residence', profile__is_email_verified=True).count()\n        return Response({'count': count})\nclass SecurityPersonnelUsersCountView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        count = User.objects.filter(profile__role='Security Personnel', profile__is_email_verified=True).count()\n        return Response({'count': count})",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "SecurityPersonnelUsersCountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class SecurityPersonnelUsersCountView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        count = User.objects.filter(profile__role='Security Personnel', profile__is_email_verified=True).count()\n        return Response({'count': count})\nclass AccessCodeByUserListView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        \"\"\"\n        Retrieve a list of access codes created by the authenticated user.",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AccessCodeByUserListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AccessCodeByUserListView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        \"\"\"\n        Retrieve a list of access codes created by the authenticated user.\n        Automatically deactivate expired access codes.\n        \"\"\"\n        try:\n            now = timezone.now().astimezone(WAT)\n            # Filter access codes by the authenticated user and order by creation date",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "AccessCodeDeactivateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class AccessCodeDeactivateView(APIView):\n    permission_classes = [IsAuthenticated]\n    def patch(self, request, code):\n        \"\"\"\n        Deactivate an access code by setting is_active to False.\n        Only the creator can deactivate their own access code.\n        \"\"\"\n        try:\n            access_code = AccessCode.objects.get(code=code)\n            if access_code.creator != request.user:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "VerifyAndCreditView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class VerifyAndCreditView(APIView):\n    def post(self, request):\n        try:\n            reference = request.data.get('reference')\n            user_id   = request.data.get('user_id')\n            plan      = (request.data.get('plan') or '').strip()\n            if not reference:\n                return Response({'error': 'Transaction reference is required'}, status=status.HTTP_400_BAD_REQUEST)\n            if not user_id:\n                return Response({'error': 'User ID is required'}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PrivateMessageMarkSeenView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class PrivateMessageMarkSeenView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        user = request.user\n        other_user_id = request.data.get('user_id')\n        if not other_user_id:\n            return Response({'error': 'user_id is required'}, status=status.HTTP_400_BAD_REQUEST)\n        # Mark all messages sent to the current user by other_user_id as seen\n        messages = PrivateMessage.objects.filter(\n            sender_id=other_user_id,",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PrivateMessageDeleteView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class PrivateMessageDeleteView(APIView):\n    permission_classes = [IsAuthenticated]\n    def delete(self, request, pk):\n        message = get_object_or_404(PrivateMessage, pk=pk)\n        # Only allow sender or receiver to delete the message\n        if message.sender != request.user and message.receiver != request.user:\n            return Response({'error': 'You do not have permission to delete this message.'}, status=status.HTTP_403_FORBIDDEN)\n        message.delete()\n        return Response({'message': 'Message deleted successfully.'}, status=status.HTTP_204_NO_CONTENT)\nclass ChangePasswordView(APIView):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ChangePasswordView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ChangePasswordView(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        user = request.user\n        current_password = request.data.get('current_password')\n        new_password = request.data.get('new_password')\n        if not current_password or not new_password:\n            return Response({'error': 'Current password and new password are required.'}, status=status.HTTP_400_BAD_REQUEST)\n        if not user.check_password(current_password):\n            return Response({'error': 'Current password is incorrect.'}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "BankServiceChargeUpdateView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class BankServiceChargeUpdateView(APIView):\n    authentication_classes = []                 # no JWT/Session auth\n    permission_classes = [AllowAny]             # allow anonymous\n    parser_classes = [MultiPartParser, FormParser]  # handle file uploads\n    def get(self, request, user_id):\n        user = get_object_or_404(User, pk=user_id)\n        bc = getattr(user, 'bank_service_charge', None)\n        if not bc:\n            return Response({'service_charge': None}, status=status.HTTP_200_OK)\n        data = BankServiceChargeSerializer(bc, context={'request': request}).data",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UpdateUserStatusView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UpdateUserStatusView(APIView):\n    def patch(self, request, pk):\n        \"\"\"\n        Update the user's status in a single endpoint.\n        Example body: { \"status\": \"active\" }\n        \"\"\"\n        allowed_statuses = [\"pending\", \"active\", \"suspended\"]  # validation\n        user_profile = get_object_or_404(UserProfile, user__pk=pk)\n        new_status = request.data.get(\"user_status\")\n        if not new_status:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "FilterUsersView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class FilterUsersView(APIView):\n    permission_classes = [AllowAny]\n    def get(self, request):\n        user_status = request.query_params.get(\"user_status\")\n        estate = request.query_params.get(\"estate\")\n        role_params = request.query_params.getlist(\"role\")\n        group_by_role = request.query_params.get(\"group_by_role\") in (\"1\", \"true\", \"True\")\n        allowed_roles = role_params or [\"Residence\", \"Security Personnel\"]\n        # Query USERS and filter via related profile fields\n        qs = (",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PublicUserDetailView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class PublicUserDetailView(APIView):\n    authentication_classes = []          # no authentication at all\n    permission_classes = [AllowAny]      # anyone can access\n    def get(self, request, pk):\n        user = get_object_or_404(User, pk=pk)\n        data = UserSerializer(user, context={'request': request}).data\n        return Response(data, status=status.HTTP_200_OK)\nclass ResetPaidChargeView(APIView):\n    authentication_classes = []                 # no JWT/Session auth\n    permission_classes = [AllowAny]             # allow anonymous",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ResetPaidChargeView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ResetPaidChargeView(APIView):\n    authentication_classes = []                 # no JWT/Session auth\n    permission_classes = [AllowAny]             # allow anonymous\n    parser_classes = [MultiPartParser, FormParser]  # handle file uploads\n    def post(self, request, user_id):\n        # Allow only owner or staff to reset\n        # if request.user.id != user_id and not request.user.is_staff:\n        #     return Response({'error': 'Not authorized'}, status=status.HTTP_403_FORBIDDEN)\n        try:\n            user = User.objects.get(pk=user_id)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def get_base_url():\n    return getattr(settings, 'BASE_URL', 'https://vaultify-43wm.onrender.com')\nlogger = logging.getLogger(__name__)\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nimport random\nfrom datetime import timedelta\nfrom django.utils.timezone import now\nfrom django.core.mail import send_mail",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "save_device_token",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def save_device_token(request):\n    token     = request.data.get('token')\n    platform  = request.data.get('platform')    # optional\n    device_id = request.data.get('device_id')   # optional\n    if not token:\n        return Response({'error': 'Token is required'}, status=400)\n    obj, created = DeviceToken.objects.get_or_create(\n        user=request.user, token=token,\n        defaults={\"platform\": platform or \"\", \"device_id\": device_id or \"\"}\n    )",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "notify_user_view",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def notify_user_view(request):\n    user_id = request.data.get('user_id')\n    title   = request.data.get('title')\n    message = request.data.get('message')\n    data    = request.data.get('data', {})  # optional\n    if not all([user_id, title, message]):\n        return Response({'error': 'user_id, title, and message are required'}, status=400)\n    user = get_object_or_404(User, id=user_id)\n    tokens = list(DeviceToken.objects.filter(user=user).values_list('token', flat=True))\n    if not tokens:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "notify_users_view",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def notify_users_view(request):\n    user_ids = request.data.get('user_ids')\n    if not isinstance(user_ids, list) or not user_ids:\n        return Response({'error': 'user_ids must be a non-empty list'}, status=400)\n    title    = request.data.get('title')\n    message  = request.data.get('message')\n    data     = request.data.get('data', {})\n    if not all([user_ids, title, message]):\n        return Response({'error': 'user_ids, title, and message are required'}, status=400)\n    tokens = list(DeviceToken.objects.filter(user_id__in=user_ids).values_list('token', flat=True))",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "notify_topic_view",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def notify_topic_view(request):\n    topic   = request.data.get('topic')  # without '/topics/'\n    title   = request.data.get('title')\n    message = request.data.get('message')\n    data    = request.data.get('data', {})\n    if not all([topic, title, message]):\n        return Response({'error': 'topic, title, and message are required'}, status=400)\n    res = send_fcm_v1_to_topic(topic, title, message, data=data)\n    return Response(res, status=200 if res[\"ok\"] else 400)\n@api_view(['POST'])",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "delete_device_token",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def delete_device_token(request):\n    token = request.data.get('token')\n    if not token:\n        return Response({'error': 'Token is required'}, status=400)\n    DeviceToken.objects.filter(user=request.user, token=token).delete()\n    return Response({'message': 'Token deleted'}, status=200)\nfrom rest_framework.permissions import IsAuthenticated\nfrom .serializers import BankServiceChargeSerializer\nfrom .models import BankServiceCharge\nfrom django.contrib.auth.models import User",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "WAT",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "WAT = pytz.timezone('Africa/Lagos')\nfrom rest_framework import generics\nfrom .serializers import AccessCodeSerializer\nfrom .models import AccessCode\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.utils.decorators import method_decorator\nfrom django.http import JsonResponse\nimport json\nimport hashlib\nimport hmac",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "OTP_LIFETIME_MINUTES",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "OTP_LIFETIME_MINUTES = 10\nclass SignupView(APIView):\n    \"\"\"\n    Signup + email‑OTP verification.\n    \"\"\"\n    def post(self, request):\n        email      = request.data.get('email', '').strip().lower()\n        otp        = request.data.get('otp', '').strip()\n        first_name = request.data.get('first_name', '').strip()\n        last_name  = request.data.get('last_name', '').strip()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "PAYSTACK_SECRET_KEY",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "PAYSTACK_SECRET_KEY = 'sk_live_43fc893ff9d7a6dd07302e43aae78602c0dc62c8'  # Replace with your Paystack secret key\n# Helper function to get the base URL for email links\ndef get_base_url():\n    return getattr(settings, 'BASE_URL', 'https://vaultify-43wm.onrender.com')\nlogger = logging.getLogger(__name__)\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nimport random\nfrom datetime import timedelta",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nimport random\nfrom datetime import timedelta\nfrom django.utils.timezone import now\nfrom django.core.mail import send_mail\nfrom django.conf import settings\nimport logging",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SignupSendOTPView(APIView):\n    def post(self, request):\n        email = request.data.get('email', '').strip().lower()\n        if not email:\n            return Response({'error': 'Email is required'}, status=status.HTTP_400_BAD_REQUEST)\n        # Check if user exists\n        from django.contrib.auth.models import User\n        try:\n            user = User.objects.get(email=email)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "WAT",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "WAT = pytz.timezone('Africa/Lagos')\nlogger = logging.getLogger(__name__)\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nclass AlertCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        estate = request.query_params.get('estate')\n        if not estate:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nclass AlertCountByEstateView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        estate = request.query_params.get('estate')\n        if not estate:\n            return Response({'error': 'Estate parameter is required'}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef _subscription_summary_and_autofix(profile):\n    \"\"\"\n    Compute start/expiry/is_active/days_remaining.\n    If expired and not already 'free', auto-downgrade plan to 'free'.\n    \"\"\"\n    now_ts = timezone.now()\n    start_dt = getattr(profile, 'subscription_start_date', None)\n    expiry_dt = getattr(profile, 'subscription_expiry_date', None)\n    is_active = bool(expiry_dt and expiry_dt >= now_ts)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "vaultify.asgi",
        "description": "vaultify.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "vaultify.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-%w2x7gp8myt=aasngm9-fjn5%eqn5+)!ng136s68&f3acj^_m)'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-%w2x7gp8myt=aasngm9-fjn5%eqn5+)!ng136s68&f3acj^_m)'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "DEBUG = True\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'corsheaders',",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',  # Must be first\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n# ALLOWED_HOSTS = ['vaultify.lexisdevelopmentltd.com', 'vaultify.lexisfinance.com', 'vaultify-43wm.onrender.com', 'vaultifyadmin.onrender.com', 'yourdomain.com', '127.0.0.1', ] ",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\nCORS_ALLOW_ALL_ORIGINS = True\n# CORS_ALLOWED_ORIGINS = [\"*\"]\n# CORS_ALLOWED_ORIGINS = [\"https://vaultifyadmin.onrender.com\"]\nCORS_ALLOW_CREDENTIALS = True\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n    ],",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\n# CORS_ALLOWED_ORIGINS = [\"*\"]\n# CORS_ALLOWED_ORIGINS = [\"https://vaultifyadmin.onrender.com\"]\nCORS_ALLOW_CREDENTIALS = True\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n}",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n}\nload_dotenv()  # Load environment variables from .env file\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.sendgrid.net'",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n}\nload_dotenv()  # Load environment variables from .env file\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.sendgrid.net'\nEMAIL_PORT = 587",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.sendgrid.net'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'apikey'\nEMAIL_HOST_PASSWORD = os.getenv('SENDGRID_API_KEY')  # Environment variable\nDEFAULT_FROM_EMAIL = 'support@vaultify.africa'\nBASE_URL = 'https://vaultify-43wm.onrender.com'\nTEMPLATES = [\n    {",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.sendgrid.net'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'apikey'\nEMAIL_HOST_PASSWORD = os.getenv('SENDGRID_API_KEY')  # Environment variable\nDEFAULT_FROM_EMAIL = 'support@vaultify.africa'\nBASE_URL = 'https://vaultify-43wm.onrender.com'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'apikey'\nEMAIL_HOST_PASSWORD = os.getenv('SENDGRID_API_KEY')  # Environment variable\nDEFAULT_FROM_EMAIL = 'support@vaultify.africa'\nBASE_URL = 'https://vaultify-43wm.onrender.com'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'web'],",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'apikey'\nEMAIL_HOST_PASSWORD = os.getenv('SENDGRID_API_KEY')  # Environment variable\nDEFAULT_FROM_EMAIL = 'support@vaultify.africa'\nBASE_URL = 'https://vaultify-43wm.onrender.com'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'web'],\n        'APP_DIRS': True,",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'apikey'\nEMAIL_HOST_PASSWORD = os.getenv('SENDGRID_API_KEY')  # Environment variable\nDEFAULT_FROM_EMAIL = 'support@vaultify.africa'\nBASE_URL = 'https://vaultify-43wm.onrender.com'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'web'],\n        'APP_DIRS': True,\n        'OPTIONS': {",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = os.getenv('SENDGRID_API_KEY')  # Environment variable\nDEFAULT_FROM_EMAIL = 'support@vaultify.africa'\nBASE_URL = 'https://vaultify-43wm.onrender.com'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'web'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = 'support@vaultify.africa'\nBASE_URL = 'https://vaultify-43wm.onrender.com'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'web'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "BASE_URL = 'https://vaultify-43wm.onrender.com'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'web'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'web'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "WSGI_APPLICATION = 'vaultify.wsgi.application'\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': 'debug.log',\n        },",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': 'debug.log',\n        },\n    },",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "DATABASES = {\n    'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))\n    # 'default': dj_database_url.config(default='postgresql://vaultifydb_user:bzCxP5iz8QoLX8g6tdyuSTNd3T9kps7b@dpg-d27fncuuk2gs73e4a7i0-a.oregon-postgres.render.com/vaultifydb')\n}\nROOT_URLCONF = 'vaultify.urls'\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "ROOT_URLCONF = 'vaultify.urls'\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# ---------------------------",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# ---------------------------\n# S3 / Linode Object Storage (Legacy E0)\n# ---------------------------\nif os.getenv(\"USE_S3_MEDIA\") == \"1\":",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# ---------------------------\n# S3 / Linode Object Storage (Legacy E0)\n# ---------------------------\nif os.getenv(\"USE_S3_MEDIA\") == \"1\":\n    DEFAULT_FILE_STORAGE = \"storages.backends.s3boto3.S3Boto3Storage\"",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR / \"static\"]\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# ---------------------------\n# S3 / Linode Object Storage (Legacy E0)\n# ---------------------------\nif os.getenv(\"USE_S3_MEDIA\") == \"1\":\n    DEFAULT_FILE_STORAGE = \"storages.backends.s3boto3.S3Boto3Storage\"\n    AWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "vaultify.settings",
        "description": "vaultify.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# ---------------------------\n# S3 / Linode Object Storage (Legacy E0)\n# ---------------------------\nif os.getenv(\"USE_S3_MEDIA\") == \"1\":\n    DEFAULT_FILE_STORAGE = \"storages.backends.s3boto3.S3Boto3Storage\"\n    AWS_ACCESS_KEY_ID = os.getenv(\"AWS_ACCESS_KEY_ID\")\n    AWS_SECRET_ACCESS_KEY = os.getenv(\"AWS_SECRET_ACCESS_KEY\")\n    AWS_STORAGE_BUCKET_NAME = os.getenv(\"AWS_STORAGE_BUCKET_NAME\", \"vaultify\")\n    AWS_S3_REGION_NAME = os.getenv(\"AWS_S3_REGION_NAME\", \"us-southeast-1\")",
        "detail": "vaultify.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "vaultify.urls",
        "description": "vaultify.urls",
        "peekOfCode": "urlpatterns = [\n    path('', lambda request: HttpResponse(\"Vaultify is alive!\")),\n    path('admin/', admin.site.urls),\n    path('api/', include('accounts.urls')),\n]\n# if settings.DEBUG:\n#     urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n# urls.py\nfrom django.conf import settings\nfrom django.conf.urls.static import static",
        "detail": "vaultify.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "vaultify.wsgi",
        "description": "vaultify.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "vaultify.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vaultify.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]